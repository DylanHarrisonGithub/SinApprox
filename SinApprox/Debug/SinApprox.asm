; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\CS\Cpp\SinApprox\SinApprox\SinApprox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
PUBLIC	??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
PUBLIC	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
PUBLIC	?hornersMethod@@YANNPANH@Z			; hornersMethod
PUBLIC	?hornersMethodSIMD@@YANNPANI@Z			; hornersMethodSIMD
PUBLIC	?unrolledHornerSinP4@@YANN@Z			; unrolledHornerSinP4
PUBLIC	?unrolledHornerSinP4SIMD@@YANN@Z		; unrolledHornerSinP4SIMD
PUBLIC	?unrolledHornerSinP8@@YANN@Z			; unrolledHornerSinP8
PUBLIC	?unrolledHornerSinP8SIMD@@YANN@Z		; unrolledHornerSinP8SIMD
PUBLIC	?factoredP4Sin@@YANN@Z				; factoredP4Sin
PUBLIC	?factoredP4SinSIMD@@YANN@Z			; factoredP4SinSIMD
PUBLIC	?factoredP8Sin@@YANN@Z				; factoredP8Sin
PUBLIC	?factoredP8SinSIMD@@YANN@Z			; factoredP8SinSIMD
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
PUBLIC	??_C@_0BA@DIAPNNHL@Accuracy?5Test?3?5?$AA@	; `string'
PUBLIC	??_C@_0BG@GEKGDBFL@horner?8s?5method?5c?$CL?$CL?3?5?$AA@ ; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_0BN@PCIHOKN@horner?8s?5method?5intrinsics?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BP@ODCOEDID@unrolled?5horner?8s?5method?5c?$CL?$CL?3?5?$AA@ ; `string'
PUBLIC	??_C@_0CG@CAPGOKJE@unrolled?5horner?8s?5method?5intrins@ ; `string'
PUBLIC	??_C@_0P@ICANGEBK@factored?5c?$CL?$CL?3?5?$AA@	; `string'
PUBLIC	??_C@_0BL@FPFKILKD@factored?5with?5intrinsics?3?5?$AA@ ; `string'
PUBLIC	??_C@_0N@EOIGBEKF@Time?5Trial?3?5?$AA@		; `string'
PUBLIC	??_C@_0P@LOMHEPNH@machine?5sin?$CIx?$CJ?$AA@	; `string'
PUBLIC	??_C@_0N@KBFONPHA@?5nanoseconds?$AA@		; `string'
PUBLIC	??_C@_06IEGNHKAC@time?3?5?$AA@			; `string'
PUBLIC	??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@	; `string'
PUBLIC	??_C@_0BE@IIJBFDGH@horner?8s?5method?5c?$CL?$CL?$AA@ ; `string'
PUBLIC	??_C@_0CC@IKFEIJOO@unrolled?5p4?5horners?5method?5in?5c?$CL@ ; `string'
PUBLIC	??_C@_0CC@DBFPCLAP@unrolled?5p8?5horners?5method?5in?5c?$CL@ ; `string'
PUBLIC	??_C@_0BI@BBMOCOEL@factored?5quartic?5in?5c?$CL?$CL?$AA@ ; `string'
PUBLIC	??_C@_0BE@GGKOCPJD@factored?5p_8?5in?5c?$CL?$CL?$AA@ ; `string'
PUBLIC	??_C@_0CE@KPFAJFKC@horner?8s?5method?5with?5asm?5intrins@ ; `string'
PUBLIC	??_C@_0CP@EBAENJH@unrolled?5p4?5horners?5method?5with?5@ ; `string'
PUBLIC	??_C@_0CP@LGOFLGFG@unrolled?5p8?5horners?5method?5with?5@ ; `string'
PUBLIC	??_C@_0CB@IJPEMKEN@factored?5quartic?5with?5intrinsics@ ; `string'
PUBLIC	??_C@_0BI@KNMALJAH@factored?5p_8?5intrinsics?$AA@ ; `string'
PUBLIC	__real@3e81a8bd333aee92
PUBLIC	__real@3ef85dc4150da9f3
PUBLIC	__real@3f04a8fb9dce943e
PUBLIC	__real@3f2ccaf9ebd98c0b
PUBLIC	__real@3f324f5d7fa558bc
PUBLIC	__real@3f5585088804c979
PUBLIC	__real@3f806b15f3ef65c3
PUBLIC	__real@3f88ae819b3a1229
PUBLIC	__real@3fa30d19d8575fff
PUBLIC	__real@3fabe3733ad470ca
PUBLIC	__real@3fef7177f65ab3d7
PUBLIC	__real@3feffff65b43d273
PUBLIC	__real@3ff00196e3891c7b
PUBLIC	__real@3ff4feeb64061ed0
PUBLIC	__real@400921cac083126f
PUBLIC	__real@400921fb65ed6164
PUBLIC	__real@400924b8343e6ef4
PUBLIC	__real@4013786cd7d05568
PUBLIC	__real@401794f1820e7d64
PUBLIC	__real@401b575f52239c9d
PUBLIC	__real@4031554e2e2f05a3
PUBLIC	__real@4048569bf41890b3
PUBLIC	__real@4059000000000000
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@be81a8c2850e8406
PUBLIC	__real@bef1d38842f721be
PUBLIC	__real@bf332321388fc9b8
PUBLIC	__real@bf54f3509055452e
PUBLIC	__real@bf55e6ffd208d315
PUBLIC	__real@bf619829fbc8e728
PUBLIC	__real@bf77d138bd84f022
PUBLIC	__real@bfa9d69d1d11cf8e
PUBLIC	__real@bfc4b2c46879b0f8
PUBLIC	__real@bfc55a0fd0f46665
PUBLIC	__real@bfcdeceea9321d76
PUBLIC	__real@bfdabb8f5f7d2415
PUBLIC	__real@bffb9dbcb6b90958
PUBLIC	__real@c00607e7cce90ccf
PUBLIC	__real@c02a3cad4dae3fc8
EXTRN	_sin:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	_strlen:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___Query_perf_counter:PROC
EXTRN	__imp___Query_perf_frequency:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__allrem:PROC
EXTRN	__ltod3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@c02a3cad4dae3fc8
CONST	SEGMENT
__real@c02a3cad4dae3fc8 DQ 0c02a3cad4dae3fc8r	; -13.1185
CONST	ENDS
;	COMDAT __real@c00607e7cce90ccf
CONST	SEGMENT
__real@c00607e7cce90ccf DQ 0c00607e7cce90ccfr	; -2.75386
CONST	ENDS
;	COMDAT __real@bffb9dbcb6b90958
CONST	SEGMENT
__real@bffb9dbcb6b90958 DQ 0bffb9dbcb6b90958r	; -1.72601
CONST	ENDS
;	COMDAT __real@bfdabb8f5f7d2415
CONST	SEGMENT
__real@bfdabb8f5f7d2415 DQ 0bfdabb8f5f7d2415r	; -0.417698
CONST	ENDS
;	COMDAT __real@bfcdeceea9321d76
CONST	SEGMENT
__real@bfcdeceea9321d76 DQ 0bfcdeceea9321d76r	; -0.233793
CONST	ENDS
;	COMDAT __real@bfc55a0fd0f46665
CONST	SEGMENT
__real@bfc55a0fd0f46665 DQ 0bfc55a0fd0f46665r	; -0.166811
CONST	ENDS
;	COMDAT __real@bfc4b2c46879b0f8
CONST	SEGMENT
__real@bfc4b2c46879b0f8 DQ 0bfc4b2c46879b0f8r	; -0.161706
CONST	ENDS
;	COMDAT __real@bfa9d69d1d11cf8e
CONST	SEGMENT
__real@bfa9d69d1d11cf8e DQ 0bfa9d69d1d11cf8er	; -0.0504655
CONST	ENDS
;	COMDAT __real@bf77d138bd84f022
CONST	SEGMENT
__real@bf77d138bd84f022 DQ 0bf77d138bd84f022r	; -0.00581476
CONST	ENDS
;	COMDAT __real@bf619829fbc8e728
CONST	SEGMENT
__real@bf619829fbc8e728 DQ 0bf619829fbc8e728r	; -0.00214775
CONST	ENDS
;	COMDAT __real@bf55e6ffd208d315
CONST	SEGMENT
__real@bf55e6ffd208d315 DQ 0bf55e6ffd208d315r	; -0.00133681
CONST	ENDS
;	COMDAT __real@bf54f3509055452e
CONST	SEGMENT
__real@bf54f3509055452e DQ 0bf54f3509055452er	; -0.00127871
CONST	ENDS
;	COMDAT __real@bf332321388fc9b8
CONST	SEGMENT
__real@bf332321388fc9b8 DQ 0bf332321388fc9b8r	; -0.000292011
CONST	ENDS
;	COMDAT __real@bef1d38842f721be
CONST	SEGMENT
__real@bef1d38842f721be DQ 0bef1d38842f721ber	; -1.70005e-05
CONST	ENDS
;	COMDAT __real@be81a8c2850e8406
CONST	SEGMENT
__real@be81a8c2850e8406 DQ 0be81a8c2850e8406r	; -1.31571e-07
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4048569bf41890b3
CONST	SEGMENT
__real@4048569bf41890b3 DQ 04048569bf41890b3r	; 48.6766
CONST	ENDS
;	COMDAT __real@4031554e2e2f05a3
CONST	SEGMENT
__real@4031554e2e2f05a3 DQ 04031554e2e2f05a3r	; 17.3332
CONST	ENDS
;	COMDAT __real@401b575f52239c9d
CONST	SEGMENT
__real@401b575f52239c9d DQ 0401b575f52239c9dr	; 6.83532
CONST	ENDS
;	COMDAT __real@401794f1820e7d64
CONST	SEGMENT
__real@401794f1820e7d64 DQ 0401794f1820e7d64r	; 5.89545
CONST	ENDS
;	COMDAT __real@4013786cd7d05568
CONST	SEGMENT
__real@4013786cd7d05568 DQ 04013786cd7d05568r	; 4.8676
CONST	ENDS
;	COMDAT __real@400924b8343e6ef4
CONST	SEGMENT
__real@400924b8343e6ef4 DQ 0400924b8343e6ef4r	; 3.14293
CONST	ENDS
;	COMDAT __real@400921fb65ed6164
CONST	SEGMENT
__real@400921fb65ed6164 DQ 0400921fb65ed6164r	; 3.14159
CONST	ENDS
;	COMDAT __real@400921cac083126f
CONST	SEGMENT
__real@400921cac083126f DQ 0400921cac083126fr	; 3.1415
CONST	ENDS
;	COMDAT __real@3ff4feeb64061ed0
CONST	SEGMENT
__real@3ff4feeb64061ed0 DQ 03ff4feeb64061ed0r	; 1.31224
CONST	ENDS
;	COMDAT __real@3ff00196e3891c7b
CONST	SEGMENT
__real@3ff00196e3891c7b DQ 03ff00196e3891c7br	; 1.00039
CONST	ENDS
;	COMDAT __real@3feffff65b43d273
CONST	SEGMENT
__real@3feffff65b43d273 DQ 03feffff65b43d273r	; 0.999995
CONST	ENDS
;	COMDAT __real@3fef7177f65ab3d7
CONST	SEGMENT
__real@3fef7177f65ab3d7 DQ 03fef7177f65ab3d7r	; 0.982601
CONST	ENDS
;	COMDAT __real@3fabe3733ad470ca
CONST	SEGMENT
__real@3fabe3733ad470ca DQ 03fabe3733ad470car	; 0.0544697
CONST	ENDS
;	COMDAT __real@3fa30d19d8575fff
CONST	SEGMENT
__real@3fa30d19d8575fff DQ 03fa30d19d8575fffr	; 0.0372093
CONST	ENDS
;	COMDAT __real@3f88ae819b3a1229
CONST	SEGMENT
__real@3f88ae819b3a1229 DQ 03f88ae819b3a1229r	; 0.0120516
CONST	ENDS
;	COMDAT __real@3f806b15f3ef65c3
CONST	SEGMENT
__real@3f806b15f3ef65c3 DQ 03f806b15f3ef65c3r	; 0.00801675
CONST	ENDS
;	COMDAT __real@3f5585088804c979
CONST	SEGMENT
__real@3f5585088804c979 DQ 03f5585088804c979r	; 0.00131346
CONST	ENDS
;	COMDAT __real@3f324f5d7fa558bc
CONST	SEGMENT
__real@3f324f5d7fa558bc DQ 03f324f5d7fa558bcr	; 0.000279389
CONST	ENDS
;	COMDAT __real@3f2ccaf9ebd98c0b
CONST	SEGMENT
__real@3f2ccaf9ebd98c0b DQ 03f2ccaf9ebd98c0br	; 0.000219672
CONST	ENDS
;	COMDAT __real@3f04a8fb9dce943e
CONST	SEGMENT
__real@3f04a8fb9dce943e DQ 03f04a8fb9dce943er	; 3.9406e-05
CONST	ENDS
;	COMDAT __real@3ef85dc4150da9f3
CONST	SEGMENT
__real@3ef85dc4150da9f3 DQ 03ef85dc4150da9f3r	; 2.32375e-05
CONST	ENDS
;	COMDAT __real@3e81a8bd333aee92
CONST	SEGMENT
__real@3e81a8bd333aee92 DQ 03e81a8bd333aee92r	; 1.31571e-07
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BI@KNMALJAH@factored?5p_8?5intrinsics?$AA@
CONST	SEGMENT
??_C@_0BI@KNMALJAH@factored?5p_8?5intrinsics?$AA@ DB 'factored p_8 intrin'
	DB	'sics', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJPEMKEN@factored?5quartic?5with?5intrinsics@
CONST	SEGMENT
??_C@_0CB@IJPEMKEN@factored?5quartic?5with?5intrinsics@ DB 'factored quar'
	DB	'tic with intrinsics', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LGOFLGFG@unrolled?5p8?5horners?5method?5with?5@
CONST	SEGMENT
??_C@_0CP@LGOFLGFG@unrolled?5p8?5horners?5method?5with?5@ DB 'unrolled p8'
	DB	' horners method with asm intrinsics', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EBAENJH@unrolled?5p4?5horners?5method?5with?5@
CONST	SEGMENT
??_C@_0CP@EBAENJH@unrolled?5p4?5horners?5method?5with?5@ DB 'unrolled p4 '
	DB	'horners method with asm intrinsics', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KPFAJFKC@horner?8s?5method?5with?5asm?5intrins@
CONST	SEGMENT
??_C@_0CE@KPFAJFKC@horner?8s?5method?5with?5asm?5intrins@ DB 'horner''s m'
	DB	'ethod with asm intrinsics', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGKOCPJD@factored?5p_8?5in?5c?$CL?$CL?$AA@
CONST	SEGMENT
??_C@_0BE@GGKOCPJD@factored?5p_8?5in?5c?$CL?$CL?$AA@ DB 'factored p_8 in '
	DB	'c++', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BBMOCOEL@factored?5quartic?5in?5c?$CL?$CL?$AA@
CONST	SEGMENT
??_C@_0BI@BBMOCOEL@factored?5quartic?5in?5c?$CL?$CL?$AA@ DB 'factored qua'
	DB	'rtic in c++', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DBFPCLAP@unrolled?5p8?5horners?5method?5in?5c?$CL@
CONST	SEGMENT
??_C@_0CC@DBFPCLAP@unrolled?5p8?5horners?5method?5in?5c?$CL@ DB 'unrolled'
	DB	' p8 horners method in c++', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IKFEIJOO@unrolled?5p4?5horners?5method?5in?5c?$CL@
CONST	SEGMENT
??_C@_0CC@IKFEIJOO@unrolled?5p4?5horners?5method?5in?5c?$CL@ DB 'unrolled'
	DB	' p4 horners method in c++', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IIJBFDGH@horner?8s?5method?5c?$CL?$CL?$AA@
CONST	SEGMENT
??_C@_0BE@IIJBFDGH@horner?8s?5method?5c?$CL?$CL?$AA@ DB 'horner''s method'
	DB	' c++', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@ DB 'ns/f(x): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEGNHKAC@time?3?5?$AA@
CONST	SEGMENT
??_C@_06IEGNHKAC@time?3?5?$AA@ DB 'time: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
CONST	SEGMENT
??_C@_0N@KBFONPHA@?5nanoseconds?$AA@ DB ' nanoseconds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LOMHEPNH@machine?5sin?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0P@LOMHEPNH@machine?5sin?$CIx?$CJ?$AA@ DB 'machine sin(x)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOIGBEKF@Time?5Trial?3?5?$AA@
CONST	SEGMENT
??_C@_0N@EOIGBEKF@Time?5Trial?3?5?$AA@ DB 'Time Trial: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FPFKILKD@factored?5with?5intrinsics?3?5?$AA@
CONST	SEGMENT
??_C@_0BL@FPFKILKD@factored?5with?5intrinsics?3?5?$AA@ DB 'factored with '
	DB	'intrinsics: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ICANGEBK@factored?5c?$CL?$CL?3?5?$AA@
CONST	SEGMENT
??_C@_0P@ICANGEBK@factored?5c?$CL?$CL?3?5?$AA@ DB 'factored c++: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CAPGOKJE@unrolled?5horner?8s?5method?5intrins@
CONST	SEGMENT
??_C@_0CG@CAPGOKJE@unrolled?5horner?8s?5method?5intrins@ DB 'unrolled hor'
	DB	'ner''s method intrinsics: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ODCOEDID@unrolled?5horner?8s?5method?5c?$CL?$CL?3?5?$AA@
CONST	SEGMENT
??_C@_0BP@ODCOEDID@unrolled?5horner?8s?5method?5c?$CL?$CL?3?5?$AA@ DB 'un'
	DB	'rolled horner''s method c++: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCIHOKN@horner?8s?5method?5intrinsics?3?5?$AA@
CONST	SEGMENT
??_C@_0BN@PCIHOKN@horner?8s?5method?5intrinsics?3?5?$AA@ DB 'horner''s me'
	DB	'thod intrinsics: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEKGDBFL@horner?8s?5method?5c?$CL?$CL?3?5?$AA@
CONST	SEGMENT
??_C@_0BG@GEKGDBFL@horner?8s?5method?5c?$CL?$CL?3?5?$AA@ DB 'horner''s me'
	DB	'thod c++: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DIAPNNHL@Accuracy?5Test?3?5?$AA@
CONST	SEGMENT
??_C@_0BA@DIAPNNHL@Accuracy?5Test?3?5?$AA@ DB 'Accuracy Test: ', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z
_TEXT	SEGMENT
$T1 = -236						; size = 8
$T2 = -220						; size = 8
$T3 = -204						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z PROC ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >, COMDAT

; 350  : 	{	// subtract two durations

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 351  : 	typedef typename common_type<
; 352  : 		duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
; 353  : 	return (_CD(_CD(_Left).count() - _CD(_Right).count()));

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR $T2[ebp+4], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	DWORD PTR $T1[ebp+4], edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	esi, eax
	mov	edi, edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR $T3[ebp], esi
	mov	DWORD PTR $T3[ebp+4], edi
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 354  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ENDP ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 141  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 			return (_Ok);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 143  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@sentry

; 133  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			: _Sentry_base(_Ostr)

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR __Ostr$[ebp]
	je	SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 127  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv86[ebp], ecx
	mov	edx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv86[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Sentry_bas:

; 109  : 			}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 			: _Myostr(_Ostr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 101  : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Sentry_bas:

; 103  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z
_TEXT	SEGMENT
tv85 = -400						; size = 4
tv88 = -396						; size = 4
tv91 = -392						; size = 4
$T1 = -384						; size = 8
$T2 = -368						; size = 8
$T3 = -352						; size = 8
$T4 = -336						; size = 8
$T5 = -320						; size = 4
$T6 = -308						; size = 8
$T7 = -292						; size = 8
$T8 = -276						; size = 8
$T9 = -260						; size = 4
$T10 = -248						; size = 8
$T11 = -232						; size = 8
$T12 = -216						; size = 8
$T13 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >, COMDAT

; 551  : 	{	// convert duration to another duration; truncate

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 552  : 	typedef ratio_divide<_Period, typename _To::period> _CF;
; 553  : 
; 554  : 	typedef typename _To::rep _ToRep;
; 555  : 	typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
; 556  : 	return (_CF::num == 1 && _CF::den == 1

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@duration_c
	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR $T11[ebp+4], edx
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T12[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	mov	DWORD PTR tv91[ebp], eax
	jmp	$LN8@duration_c
$LN7@duration_c:
	xor	edx, edx
	je	SHORT $LN5@duration_c
	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR $T7[ebp+4], edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	lea	ecx, DWORD PTR $T8[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	mov	DWORD PTR tv88[ebp], eax
	jmp	$LN6@duration_c
$LN5@duration_c:
	xor	ecx, ecx
	je	SHORT $LN3@duration_c
	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN4@duration_c
$LN3@duration_c:
	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	mov	DWORD PTR tv85[ebp], eax
$LN4@duration_c:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR $T6[ebp+4], ecx
	lea	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR tv88[ebp], edx
$LN6@duration_c:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T10[ebp], edx
	mov	DWORD PTR $T10[ebp+4], eax
	lea	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN8@duration_c:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T13[ebp], edx
	mov	eax, DWORD PTR $T13[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 557  : 			? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
; 558  : 		: _CF::num != 1 && _CF::den == 1
; 559  : 			? static_cast<_To>(static_cast<_ToRep>(
; 560  : 				static_cast<_CR>(
; 561  : 					_Dur.count()) * static_cast<_CR>(_CF::num)))
; 562  : 		: _CF::num == 1 && _CF::den != 1
; 563  : 			? static_cast<_To>(static_cast<_ToRep>(
; 564  : 				static_cast<_CR>(_Dur.count())
; 565  : 					/ static_cast<_CR>(_CF::den)))
; 566  : 		: static_cast<_To>(static_cast<_ToRep>(
; 567  : 			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
; 568  : 				/ static_cast<_CR>(_CF::den))));
; 569  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
_TEXT	SEGMENT
$T1 = -220						; size = 8
$T2 = -204						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z PROC ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT

; 847  : 	{	// add time_point to time_point

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 848  : 	return (_Left.time_since_epoch() - _Right.time_since_epoch());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 849  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ENDP ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 991  : 	{	// insert newline and flush stream

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 992  : 	_Ostr.put(_Ostr.widen('\n'));

	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 993  : 	_Ostr.flush();

	mov	esi, esp
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 994  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]

; 995  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 781  : 	typedef char _Elem;
; 782  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 783  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 784  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 785  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv328[ebp], eax
	mov	DWORD PTR tv328[ebp+4], edx
	cmp	DWORD PTR tv328[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv328[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv342[ebp], eax
	mov	DWORD PTR tv342[ebp+4], edx
	mov	eax, DWORD PTR tv342[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv342[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 786  : 		? 0 : _Ostr.width() - _Count;
; 787  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 788  : 
; 789  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator

; 790  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 791  : 	else

	jmp	$LN9@operator
$LN8@operator:

; 792  : 		{	// state okay, insert
; 793  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 794  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN26@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv283[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv283[ebp]
	push	eax
	mov	ecx, DWORD PTR tv284[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv285[ebp], eax
	mov	ecx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator

; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 800  : 					break;

	jmp	SHORT $LN11@operator
$LN12@operator:

; 801  : 					}
; 802  : 
; 803  : 		if (_State == ios_base::goodbit

	jmp	$LN2@operator
$LN11@operator:

; 804  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN13@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv286[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv286[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	DWORD PTR tv287[ebp+4], edx
	mov	eax, DWORD PTR tv287[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv287[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN13@operator
$LN27@operator:

; 805  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN13@operator:

; 806  : 
; 807  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN14@operator

; 808  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN14@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN14@operator
$LN28@operator:

; 809  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv288[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv289[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv288[ebp]
	push	eax
	mov	ecx, DWORD PTR tv289[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	ecx, DWORD PTR tv290[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@operator

; 810  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 811  : 					{	// insertion failed, quit
; 812  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 813  : 					break;

	jmp	SHORT $LN14@operator
$LN15@operator:

; 814  : 					}

	jmp	$LN5@operator
$LN14@operator:

; 815  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 816  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN9@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 817  : 		}
; 818  : 
; 819  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 820  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]

; 821  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@operator:
	DD	1
	DD	$LN31@operator
$LN31@operator:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN29@operator
$LN29@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv2334 = -2500						; size = 4
tv2320 = -2500						; size = 4
tv1384 = -2496						; size = 8
tv1303 = -2496						; size = 8
tv2332 = -2488						; size = 8
tv2318 = -2488						; size = 8
tv1377 = -2480						; size = 8
tv1296 = -2480						; size = 8
tv2330 = -2468						; size = 4
tv2316 = -2468						; size = 4
tv1371 = -2464						; size = 8
tv1290 = -2464						; size = 8
tv2328 = -2456						; size = 8
tv2314 = -2456						; size = 8
tv1364 = -2448						; size = 8
tv1283 = -2448						; size = 8
tv2422 = -2436						; size = 4
tv2416 = -2436						; size = 4
tv2410 = -2436						; size = 4
tv2404 = -2436						; size = 4
tv2326 = -2436						; size = 4
tv2312 = -2436						; size = 4
tv1566 = -2432						; size = 8
tv1523 = -2432						; size = 8
tv1480 = -2432						; size = 8
tv1437 = -2432						; size = 8
tv1358 = -2432						; size = 8
tv1277 = -2432						; size = 8
tv2420 = -2424						; size = 8
tv2414 = -2424						; size = 8
tv2408 = -2424						; size = 8
tv2402 = -2424						; size = 8
tv2324 = -2424						; size = 8
tv2310 = -2424						; size = 8
tv1560 = -2416						; size = 8
tv1517 = -2416						; size = 8
tv1474 = -2416						; size = 8
tv1431 = -2416						; size = 8
tv1351 = -2416						; size = 8
tv1270 = -2416						; size = 8
tv1554 = -2408						; size = 8
tv1511 = -2408						; size = 8
tv1468 = -2408						; size = 8
tv1425 = -2408						; size = 8
tv1345 = -2408						; size = 8
tv1264 = -2408						; size = 8
tv2418 = -2400						; size = 8
tv2412 = -2400						; size = 8
tv2406 = -2400						; size = 8
tv2400 = -2400						; size = 8
tv2322 = -2400						; size = 8
tv2308 = -2400						; size = 8
tv1548 = -2392						; size = 8
tv1505 = -2392						; size = 8
tv1462 = -2392						; size = 8
tv1419 = -2392						; size = 8
tv1338 = -2392						; size = 8
tv1257 = -2392						; size = 8
tv2424 = -2384						; size = 4
$T1 = -2376						; size = 8
$T2 = -2360						; size = 8
$T3 = -2344						; size = 8
$T4 = -2328						; size = 8
$T5 = -2312						; size = 8
$T6 = -2296						; size = 8
$T7 = -2280						; size = 8
$T8 = -2264						; size = 8
$T9 = -2248						; size = 8
$T10 = -2232						; size = 8
$T11 = -2216						; size = 8
$T12 = -2200						; size = 8
$T13 = -2184						; size = 8
$T14 = -2168						; size = 8
$T15 = -2152						; size = 8
$T16 = -2136						; size = 8
$T17 = -2120						; size = 8
$T18 = -2104						; size = 8
$T19 = -2088						; size = 8
$T20 = -2072						; size = 8
$T21 = -2056						; size = 8
$T22 = -2040						; size = 8
$T23 = -2024						; size = 8
$T24 = -2008						; size = 8
$T25 = -1992						; size = 8
$T26 = -1976						; size = 8
$T27 = -1960						; size = 8
$T28 = -1944						; size = 8
$T29 = -1928						; size = 8
$T30 = -1912						; size = 8
$T31 = -1896						; size = 8
$T32 = -1880						; size = 8
$T33 = -1864						; size = 8
$T34 = -1848						; size = 8
$T35 = -1832						; size = 8
$T36 = -1816						; size = 8
$T37 = -1800						; size = 8
$T38 = -1784						; size = 8
$T39 = -1768						; size = 8
$T40 = -1752						; size = 8
$T41 = -1736						; size = 8
$T42 = -1720						; size = 8
$T43 = -1704						; size = 8
$T44 = -1688						; size = 8
$T45 = -1672						; size = 8
$T46 = -1656						; size = 8
$T47 = -1640						; size = 8
$T48 = -1624						; size = 8
$T49 = -1608						; size = 8
$T50 = -1592						; size = 8
$T51 = -1576						; size = 8
$T52 = -1560						; size = 8
$T53 = -1544						; size = 8
$T54 = -1528						; size = 8
$T55 = -1512						; size = 8
$T56 = -1496						; size = 8
$T57 = -1480						; size = 8
$T58 = -1464						; size = 8
$T59 = -1448						; size = 8
$T60 = -1432						; size = 8
$T61 = -1416						; size = 8
$T62 = -1400						; size = 8
$T63 = -1384						; size = 8
$T64 = -1368						; size = 8
_n$65 = -584						; size = 4
_n$66 = -572						; size = 4
_n$67 = -560						; size = 4
_n$68 = -548						; size = 4
_n$69 = -536						; size = 4
_n$70 = -524						; size = 4
_n$71 = -512						; size = 4
_n$72 = -500						; size = 4
_n$73 = -488						; size = 4
_n$74 = -476						; size = 4
_t2$75 = -464						; size = 8
_n$76 = -444						; size = 4
_t1$77 = -432						; size = 8
_test$78 = -416						; size = 4
_n$79 = -404						; size = 4
_n$80 = -392						; size = 4
_n$81 = -380						; size = 4
_n$82 = -368						; size = 4
_n$83 = -356						; size = 4
_n$84 = -344						; size = 4
_iterations$ = -332					; size = 4
_x$ = -320						; size = 8
_c8$ = -288						; size = 72
_c6$ = -192						; size = 56
_c4$ = -112						; size = 40
_c2$ = -48						; size = 24
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 220  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2504				; 000009c8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2504]
	mov	ecx, 626				; 00000272H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 221  : 
; 222  : 	__declspec(align(16)) double c2[] = { -0.4176977570064662,   1.3122362048324483, -0.0504654977784461 };

	movsd	xmm0, QWORD PTR __real@bfdabb8f5f7d2415
	movsd	QWORD PTR _c2$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff4feeb64061ed0
	movsd	QWORD PTR _c2$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@bfa9d69d1d11cf8e
	movsd	QWORD PTR _c2$[ebp+16], xmm0

; 223  : 	__declspec(align(16)) double c4[] = { 0.03720932737240900, -0.23379309903632944, 0.05446968167436379, 0.98260114780498042, 0.00131345589768425 };

	movsd	xmm0, QWORD PTR __real@3fa30d19d8575fff
	movsd	QWORD PTR _c4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bfcdeceea9321d76
	movsd	QWORD PTR _c4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3fabe3733ad470ca
	movsd	QWORD PTR _c4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3fef7177f65ab3d7
	movsd	QWORD PTR _c4$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f5585088804c979
	movsd	QWORD PTR _c4$[ebp+32], xmm0

; 224  : 	__declspec(align(16)) double c6[] = { -1.27871387060836e-003, 1.20515943047020e-002, -5.81476368125425e-003, -1.61705542577131e-001, -2.14775276097336e-003, 1.00038803940859e+000, -1.70004824988927e-005 };

	movsd	xmm0, QWORD PTR __real@bf54f3509055452e
	movsd	QWORD PTR _c6$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3f88ae819b3a1229
	movsd	QWORD PTR _c6$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@bf77d138bd84f022
	movsd	QWORD PTR _c6$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@bfc4b2c46879b0f8
	movsd	QWORD PTR _c6$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@bf619829fbc8e728
	movsd	QWORD PTR _c6$[ebp+32], xmm0
	movsd	xmm0, QWORD PTR __real@3ff00196e3891c7b
	movsd	QWORD PTR _c6$[ebp+40], xmm0
	movsd	xmm0, QWORD PTR __real@bef1d38842f721be
	movsd	QWORD PTR _c6$[ebp+48], xmm0

; 225  : 	__declspec(align(16)) double c8[] = { 2.32374889636375e-005, -2.92010889608420e-004, 2.19672210664518e-004, 8.01674986535062e-003, 2.79388739405372e-004, -1.66810967472702e-001, 3.94059931985509e-005, 9.99995401622597e-001, 1.31570823227546e-007 };

	movsd	xmm0, QWORD PTR __real@3ef85dc4150da9f3
	movsd	QWORD PTR _c8$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bf332321388fc9b8
	movsd	QWORD PTR _c8$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3f2ccaf9ebd98c0b
	movsd	QWORD PTR _c8$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3f806b15f3ef65c3
	movsd	QWORD PTR _c8$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f324f5d7fa558bc
	movsd	QWORD PTR _c8$[ebp+32], xmm0
	movsd	xmm0, QWORD PTR __real@bfc55a0fd0f46665
	movsd	QWORD PTR _c8$[ebp+40], xmm0
	movsd	xmm0, QWORD PTR __real@3f04a8fb9dce943e
	movsd	QWORD PTR _c8$[ebp+48], xmm0
	movsd	xmm0, QWORD PTR __real@3feffff65b43d273
	movsd	QWORD PTR _c8$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3e81a8bd333aee92
	movsd	QWORD PTR _c8$[ebp+64], xmm0

; 226  : 
; 227  : 	__declspec(align(16)) double x;
; 228  : 	int iterations = 1000000;

	mov	DWORD PTR _iterations$[ebp], 1000000	; 000f4240H

; 229  : 
; 230  : 	cout << endl << "Accuracy Test: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BA@DIAPNNHL@Accuracy?5Test?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 231  : 
; 232  : 	cout << endl << "horner's method c++: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BG@GEKGDBFL@horner?8s?5method?5c?$CL?$CL?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 233  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$84[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _n$84[ebp]
	add	eax, 1
	mov	DWORD PTR _n$84[ebp], eax
$LN4@main:
	cmp	DWORD PTR _n$84[ebp], 100		; 00000064H
	jge	$LN3@main

; 234  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$84[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 235  : 		cout << sin(x) - hornersMethod(x, c8, 9)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1257[ebp]
	movsd	xmm0, QWORD PTR tv1257[ebp]
	push	3
	lea	eax, DWORD PTR _c2$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2308[ebp], xmm0
	call	?hornersMethod@@YANNPANH@Z		; hornersMethod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1264[ebp]
	movsd	xmm0, QWORD PTR tv2308[ebp]
	subsd	xmm0, QWORD PTR tv1264[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1270[ebp]
	movsd	xmm0, QWORD PTR tv1270[ebp]
	push	5
	lea	ecx, DWORD PTR _c4$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2310[ebp], xmm0
	call	?hornersMethod@@YANNPANH@Z		; hornersMethod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1277[ebp]
	movsd	xmm0, QWORD PTR tv2310[ebp]
	subsd	xmm0, QWORD PTR tv1277[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	DWORD PTR tv2312[ebp], eax
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1283[ebp]
	movsd	xmm0, QWORD PTR tv1283[ebp]
	push	7
	lea	edx, DWORD PTR _c6$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2314[ebp], xmm0
	call	?hornersMethod@@YANNPANH@Z		; hornersMethod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1290[ebp]
	movsd	xmm0, QWORD PTR tv2314[ebp]
	subsd	xmm0, QWORD PTR tv1290[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	DWORD PTR tv2316[ebp], eax
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1296[ebp]
	movsd	xmm0, QWORD PTR tv1296[ebp]
	push	9
	lea	eax, DWORD PTR _c8$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2318[ebp], xmm0
	call	?hornersMethod@@YANNPANH@Z		; hornersMethod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1303[ebp]
	movsd	xmm0, QWORD PTR tv2318[ebp]
	subsd	xmm0, QWORD PTR tv1303[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2320[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2320[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2316[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2312[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 236  : 			<< ", " << sin(x) - hornersMethod(x, c6, 7)
; 237  : 			<< ", " << sin(x) - hornersMethod(x, c4, 5)
; 238  : 			<< ", " << sin(x) - hornersMethod(x, c2, 3)
; 239  : 			<< endl;
; 240  : 	}

	jmp	$LN2@main
$LN3@main:

; 241  : 
; 242  : 	cout << endl << "horner's method intrinsics: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BN@PCIHOKN@horner?8s?5method?5intrinsics?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 243  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$83[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _n$83[ebp]
	add	eax, 1
	mov	DWORD PTR _n$83[ebp], eax
$LN7@main:
	cmp	DWORD PTR _n$83[ebp], 100		; 00000064H
	jge	$LN6@main

; 244  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$83[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 245  : 		cout << sin(x) - hornersMethodSIMD(x, c8, 9)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1338[ebp]
	movsd	xmm0, QWORD PTR tv1338[ebp]
	push	3
	lea	eax, DWORD PTR _c2$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2322[ebp], xmm0
	call	?hornersMethodSIMD@@YANNPANI@Z		; hornersMethodSIMD
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1345[ebp]
	movsd	xmm0, QWORD PTR tv2322[ebp]
	subsd	xmm0, QWORD PTR tv1345[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1351[ebp]
	movsd	xmm0, QWORD PTR tv1351[ebp]
	push	5
	lea	ecx, DWORD PTR _c4$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2324[ebp], xmm0
	call	?hornersMethodSIMD@@YANNPANI@Z		; hornersMethodSIMD
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1358[ebp]
	movsd	xmm0, QWORD PTR tv2324[ebp]
	subsd	xmm0, QWORD PTR tv1358[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	DWORD PTR tv2326[ebp], eax
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1364[ebp]
	movsd	xmm0, QWORD PTR tv1364[ebp]
	push	7
	lea	edx, DWORD PTR _c6$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2328[ebp], xmm0
	call	?hornersMethodSIMD@@YANNPANI@Z		; hornersMethodSIMD
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1371[ebp]
	movsd	xmm0, QWORD PTR tv2328[ebp]
	subsd	xmm0, QWORD PTR tv1371[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	DWORD PTR tv2330[ebp], eax
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1377[ebp]
	movsd	xmm0, QWORD PTR tv1377[ebp]
	push	9
	lea	eax, DWORD PTR _c8$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2332[ebp], xmm0
	call	?hornersMethodSIMD@@YANNPANI@Z		; hornersMethodSIMD
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1384[ebp]
	movsd	xmm0, QWORD PTR tv2332[ebp]
	subsd	xmm0, QWORD PTR tv1384[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2334[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2334[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2330[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2326[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 246  : 			<< ", " << sin(x) - hornersMethodSIMD(x, c6, 7)
; 247  : 			<< ", " << sin(x) - hornersMethodSIMD(x, c4, 5)
; 248  : 			<< ", " << sin(x) - hornersMethodSIMD(x, c2, 3)
; 249  : 			<< endl;
; 250  : 	}

	jmp	$LN5@main
$LN6@main:

; 251  : 
; 252  : 	cout << endl << "unrolled horner's method c++: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BP@ODCOEDID@unrolled?5horner?8s?5method?5c?$CL?$CL?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 253  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$82[ebp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR _n$82[ebp]
	add	eax, 1
	mov	DWORD PTR _n$82[ebp], eax
$LN10@main:
	cmp	DWORD PTR _n$82[ebp], 100		; 00000064H
	jge	$LN9@main

; 254  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$82[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 255  : 		cout << sin(x) - unrolledHornerSinP8(x)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1419[ebp]
	movsd	xmm0, QWORD PTR tv1419[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2400[ebp], xmm0
	call	?unrolledHornerSinP4@@YANN@Z		; unrolledHornerSinP4
	add	esp, 8
	fstp	QWORD PTR tv1425[ebp]
	movsd	xmm0, QWORD PTR tv2400[ebp]
	subsd	xmm0, QWORD PTR tv1425[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1431[ebp]
	movsd	xmm0, QWORD PTR tv1431[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2402[ebp], xmm0
	call	?unrolledHornerSinP8@@YANN@Z		; unrolledHornerSinP8
	add	esp, 8
	fstp	QWORD PTR tv1437[ebp]
	movsd	xmm0, QWORD PTR tv2402[ebp]
	subsd	xmm0, QWORD PTR tv1437[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2404[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2404[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 256  : 			<< ", " << sin(x) - unrolledHornerSinP4(x)
; 257  : 			<< endl;
; 258  : 	}

	jmp	$LN8@main
$LN9@main:

; 259  : 
; 260  : 	cout << endl << "unrolled horner's method intrinsics: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CG@CAPGOKJE@unrolled?5horner?8s?5method?5intrins@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 261  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$81[ebp], 0
	jmp	SHORT $LN13@main
$LN11@main:
	mov	eax, DWORD PTR _n$81[ebp]
	add	eax, 1
	mov	DWORD PTR _n$81[ebp], eax
$LN13@main:
	cmp	DWORD PTR _n$81[ebp], 100		; 00000064H
	jge	$LN12@main

; 262  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$81[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 263  : 		cout << sin(x) - unrolledHornerSinP8SIMD(x)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1462[ebp]
	movsd	xmm0, QWORD PTR tv1462[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2406[ebp], xmm0
	call	?unrolledHornerSinP4SIMD@@YANN@Z	; unrolledHornerSinP4SIMD
	add	esp, 8
	fstp	QWORD PTR tv1468[ebp]
	movsd	xmm0, QWORD PTR tv2406[ebp]
	subsd	xmm0, QWORD PTR tv1468[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1474[ebp]
	movsd	xmm0, QWORD PTR tv1474[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2408[ebp], xmm0
	call	?unrolledHornerSinP8SIMD@@YANN@Z	; unrolledHornerSinP8SIMD
	add	esp, 8
	fstp	QWORD PTR tv1480[ebp]
	movsd	xmm0, QWORD PTR tv2408[ebp]
	subsd	xmm0, QWORD PTR tv1480[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2410[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2410[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  : 			<< ", " << sin(x) - unrolledHornerSinP4SIMD(x)
; 265  : 			<< endl;
; 266  : 	}

	jmp	$LN11@main
$LN12@main:

; 267  : 
; 268  : 	cout << endl << "factored c++: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0P@ICANGEBK@factored?5c?$CL?$CL?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 269  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$80[ebp], 0
	jmp	SHORT $LN16@main
$LN14@main:
	mov	eax, DWORD PTR _n$80[ebp]
	add	eax, 1
	mov	DWORD PTR _n$80[ebp], eax
$LN16@main:
	cmp	DWORD PTR _n$80[ebp], 100		; 00000064H
	jge	$LN15@main

; 270  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$80[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 271  : 		cout << sin(x) - factoredP8Sin(x)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1505[ebp]
	movsd	xmm0, QWORD PTR tv1505[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2412[ebp], xmm0
	call	?factoredP4Sin@@YANN@Z			; factoredP4Sin
	add	esp, 8
	fstp	QWORD PTR tv1511[ebp]
	movsd	xmm0, QWORD PTR tv2412[ebp]
	subsd	xmm0, QWORD PTR tv1511[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1517[ebp]
	movsd	xmm0, QWORD PTR tv1517[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2414[ebp], xmm0
	call	?factoredP8Sin@@YANN@Z			; factoredP8Sin
	add	esp, 8
	fstp	QWORD PTR tv1523[ebp]
	movsd	xmm0, QWORD PTR tv2414[ebp]
	subsd	xmm0, QWORD PTR tv1523[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2416[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2416[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  : 			<< ", " << sin(x) - factoredP4Sin(x)
; 273  : 			<< endl;
; 274  : 	}

	jmp	$LN14@main
$LN15@main:

; 275  : 
; 276  : 	cout << endl << "factored with intrinsics: " << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BL@FPFKILKD@factored?5with?5intrinsics?3?5?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 277  : 	for (int n = 0; n < 100; n++) {

	mov	DWORD PTR _n$79[ebp], 0
	jmp	SHORT $LN19@main
$LN17@main:
	mov	eax, DWORD PTR _n$79[ebp]
	add	eax, 1
	mov	DWORD PTR _n$79[ebp], eax
$LN19@main:
	cmp	DWORD PTR _n$79[ebp], 100		; 00000064H
	jge	$LN18@main

; 278  : 		x = 3.1415*((double)n / 100.0);

	cvtsi2sd xmm0, DWORD PTR _n$79[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR __real@400921cac083126f
	movsd	QWORD PTR _x$[ebp], xmm0

; 279  : 		cout << sin(x) - factoredP8SinSIMD(x)

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1548[ebp]
	movsd	xmm0, QWORD PTR tv1548[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2418[ebp], xmm0
	call	?factoredP4SinSIMD@@YANN@Z		; factoredP4SinSIMD
	add	esp, 8
	fstp	QWORD PTR tv1554[ebp]
	movsd	xmm0, QWORD PTR tv2418[ebp]
	subsd	xmm0, QWORD PTR tv1554[ebp]
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv1560[ebp]
	movsd	xmm0, QWORD PTR tv1560[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2420[ebp], xmm0
	call	?factoredP8SinSIMD@@YANN@Z		; factoredP8SinSIMD
	add	esp, 8
	fstp	QWORD PTR tv1566[ebp]
	movsd	xmm0, QWORD PTR tv2420[ebp]
	subsd	xmm0, QWORD PTR tv1566[ebp]
	mov	eax, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2422[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, DWORD PTR tv2422[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 280  : 			<< ", " << sin(x) - factoredP4SinSIMD(x)
; 281  : 			<< endl;
; 282  : 	}

	jmp	$LN17@main
$LN18@main:

; 283  : 
; 284  : 	srand(time(NULL));

	push	0
	call	_time
	add	esp, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__srand
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 285  : 	x = ((double)rand() / (RAND_MAX));

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40dfffc000000000
	movsd	QWORD PTR _x$[ebp], xmm0

; 286  : 
; 287  : 	for (int test = 1; test < 4; test++) {

	mov	DWORD PTR _test$78[ebp], 1
	jmp	SHORT $LN22@main
$LN20@main:
	mov	eax, DWORD PTR _test$78[ebp]
	add	eax, 1
	mov	DWORD PTR _test$78[ebp], eax
$LN22@main:
	cmp	DWORD PTR _test$78[ebp], 4
	jge	$LN21@main

; 288  : 
; 289  : 		cout << endl << "Time Trial: " << test << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	edi, esp
	mov	eax, DWORD PTR _test$78[ebp]
	push	eax
	push	OFFSET ??_C@_0N@EOIGBEKF@Time?5Trial?3?5?$AA@
	mov	eax, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv2424[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	ecx, DWORD PTR tv2424[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  : 
; 291  : 		// Machine sin(x).
; 292  : 		cout << "machine sin(x)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0P@LOMHEPNH@machine?5sin?$CIx?$CJ?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 293  : 		auto t1 = Clock::now();

	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4

; 294  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$76[ebp], 0
	jmp	SHORT $LN25@main
$LN23@main:
	mov	eax, DWORD PTR _n$76[ebp]
	add	eax, 1
	mov	DWORD PTR _n$76[ebp], eax
$LN25@main:
	mov	eax, DWORD PTR _n$76[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN24@main

; 295  : 			x = sin(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 296  : 		}

	jmp	SHORT $LN23@main
$LN24@main:

; 297  : 		auto t2 = Clock::now();

	lea	eax, DWORD PTR _t2$75[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4

; 298  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T63[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 299  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 300  : 			<< " nanoseconds" << std::endl;
; 301  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T62[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T61[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 302  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 303  : 
; 304  : 		// Horner's method c++.
; 305  : 		cout << endl << "horner's method c++" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BE@IIJBFDGH@horner?8s?5method?5c?$CL?$CL?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 306  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T60[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 307  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$74[ebp], 0
	jmp	SHORT $LN28@main
$LN26@main:
	mov	eax, DWORD PTR _n$74[ebp]
	add	eax, 1
	mov	DWORD PTR _n$74[ebp], eax
$LN28@main:
	mov	eax, DWORD PTR _n$74[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN27@main

; 308  : 			x = hornersMethod(x, c8, 9);

	push	9
	lea	eax, DWORD PTR _c8$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?hornersMethod@@YANNPANH@Z		; hornersMethod
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _x$[ebp]

; 309  : 		}

	jmp	SHORT $LN26@main
$LN27@main:

; 310  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T59[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 311  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T57[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 312  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 313  : 			<< " nanoseconds" << std::endl;
; 314  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T56[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 315  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 316  : 
; 317  : 		// unrolled p4 horners method in c++.
; 318  : 		cout << endl << "unrolled p4 horners method in c++" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CC@IKFEIJOO@unrolled?5p4?5horners?5method?5in?5c?$CL@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 319  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T54[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 320  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$73[ebp], 0
	jmp	SHORT $LN31@main
$LN29@main:
	mov	eax, DWORD PTR _n$73[ebp]
	add	eax, 1
	mov	DWORD PTR _n$73[ebp], eax
$LN31@main:
	mov	eax, DWORD PTR _n$73[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN30@main

; 321  : 			x = unrolledHornerSinP4(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?unrolledHornerSinP4@@YANN@Z		; unrolledHornerSinP4
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 322  : 		}

	jmp	SHORT $LN29@main
$LN30@main:

; 323  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T53[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 324  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T52[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T51[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 325  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 326  : 			<< " nanoseconds" << std::endl;
; 327  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T50[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T49[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 328  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 329  : 
; 330  : 		// unrolled p8 horners method in c++.
; 331  : 		cout << endl << "unrolled p8 horners method in c++" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CC@DBFPCLAP@unrolled?5p8?5horners?5method?5in?5c?$CL@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 332  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T48[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 333  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$72[ebp], 0
	jmp	SHORT $LN34@main
$LN32@main:
	mov	eax, DWORD PTR _n$72[ebp]
	add	eax, 1
	mov	DWORD PTR _n$72[ebp], eax
$LN34@main:
	mov	eax, DWORD PTR _n$72[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN33@main

; 334  : 			x = unrolledHornerSinP8(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?unrolledHornerSinP8@@YANN@Z		; unrolledHornerSinP8
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 335  : 		}

	jmp	SHORT $LN32@main
$LN33@main:

; 336  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T47[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 337  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T46[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T45[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 338  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 339  : 			<< " nanoseconds" << std::endl;
; 340  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T44[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T43[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 341  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 342  : 
; 343  : 		// factored quartic in c++.
; 344  : 		cout << endl << "factored quartic in c++" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BI@BBMOCOEL@factored?5quartic?5in?5c?$CL?$CL?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 345  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T42[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 346  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$71[ebp], 0
	jmp	SHORT $LN37@main
$LN35@main:
	mov	eax, DWORD PTR _n$71[ebp]
	add	eax, 1
	mov	DWORD PTR _n$71[ebp], eax
$LN37@main:
	mov	eax, DWORD PTR _n$71[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN36@main

; 347  : 			x = factoredP4Sin(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?factoredP4Sin@@YANN@Z			; factoredP4Sin
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 348  : 		}

	jmp	SHORT $LN35@main
$LN36@main:

; 349  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T41[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 350  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T40[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T39[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 351  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 352  : 			<< " nanoseconds" << std::endl;
; 353  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T38[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T37[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 354  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 355  : 
; 356  : 		// factored p_8 in c++.
; 357  : 		cout << endl << "factored p_8 in c++" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BE@GGKOCPJD@factored?5p_8?5in?5c?$CL?$CL?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 358  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T36[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 359  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$70[ebp], 0
	jmp	SHORT $LN40@main
$LN38@main:
	mov	eax, DWORD PTR _n$70[ebp]
	add	eax, 1
	mov	DWORD PTR _n$70[ebp], eax
$LN40@main:
	mov	eax, DWORD PTR _n$70[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN39@main

; 360  : 			x = factoredP8Sin(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?factoredP8Sin@@YANN@Z			; factoredP8Sin
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 361  : 		}

	jmp	SHORT $LN38@main
$LN39@main:

; 362  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T35[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 363  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T34[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T33[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 364  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 365  : 			<< " nanoseconds" << std::endl;
; 366  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T32[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T31[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 367  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 368  : 
; 369  : 		// Horner's method with intrinsics.
; 370  : 		cout << endl << "horner's method with asm intrinsics" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CE@KPFAJFKC@horner?8s?5method?5with?5asm?5intrins@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 371  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T30[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 372  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$69[ebp], 0
	jmp	SHORT $LN43@main
$LN41@main:
	mov	eax, DWORD PTR _n$69[ebp]
	add	eax, 1
	mov	DWORD PTR _n$69[ebp], eax
$LN43@main:
	mov	eax, DWORD PTR _n$69[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN42@main

; 373  : 			x = hornersMethodSIMD(x, c8, 9);

	push	9
	lea	eax, DWORD PTR _c8$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?hornersMethodSIMD@@YANNPANI@Z		; hornersMethodSIMD
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _x$[ebp]

; 374  : 		}

	jmp	SHORT $LN41@main
$LN42@main:

; 375  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T29[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 376  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T28[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 377  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 378  : 			<< " nanoseconds" << std::endl;
; 379  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 380  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 381  : 
; 382  : 		// unrolled p4 horners method with asm intrinsics.
; 383  : 		cout << endl << "unrolled p4 horners method with asm intrinsics" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CP@EBAENJH@unrolled?5p4?5horners?5method?5with?5@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 384  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T24[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 385  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$68[ebp], 0
	jmp	SHORT $LN46@main
$LN44@main:
	mov	eax, DWORD PTR _n$68[ebp]
	add	eax, 1
	mov	DWORD PTR _n$68[ebp], eax
$LN46@main:
	mov	eax, DWORD PTR _n$68[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN45@main

; 386  : 			x = unrolledHornerSinP4SIMD(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?unrolledHornerSinP4SIMD@@YANN@Z	; unrolledHornerSinP4SIMD
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 387  : 		}

	jmp	SHORT $LN44@main
$LN45@main:

; 388  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T23[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 389  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T22[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 390  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 391  : 			<< " nanoseconds" << std::endl;
; 392  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T20[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T19[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 393  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 394  : 
; 395  : 		// unrolled p8 horners method with asm intrinsics.
; 396  : 		cout << endl << "unrolled p8 horners method with asm intrinsics" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CP@LGOFLGFG@unrolled?5p8?5horners?5method?5with?5@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 397  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T18[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 398  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$67[ebp], 0
	jmp	SHORT $LN49@main
$LN47@main:
	mov	eax, DWORD PTR _n$67[ebp]
	add	eax, 1
	mov	DWORD PTR _n$67[ebp], eax
$LN49@main:
	mov	eax, DWORD PTR _n$67[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN48@main

; 399  : 			x = unrolledHornerSinP8SIMD(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?unrolledHornerSinP8SIMD@@YANN@Z	; unrolledHornerSinP8SIMD
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 400  : 		}

	jmp	SHORT $LN47@main
$LN48@main:

; 401  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T17[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 402  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T16[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 403  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 404  : 			<< " nanoseconds" << std::endl;
; 405  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T14[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 406  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 407  : 
; 408  : 		// factored quartic intrinsics.
; 409  : 		cout << endl << "factored quartic with intrinsics" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0CB@IJPEMKEN@factored?5quartic?5with?5intrinsics@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 410  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 411  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$66[ebp], 0
	jmp	SHORT $LN52@main
$LN50@main:
	mov	eax, DWORD PTR _n$66[ebp]
	add	eax, 1
	mov	DWORD PTR _n$66[ebp], eax
$LN52@main:
	mov	eax, DWORD PTR _n$66[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN51@main

; 412  : 			x = factoredP4SinSIMD(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?factoredP4SinSIMD@@YANN@Z		; factoredP4SinSIMD
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 413  : 		}

	jmp	SHORT $LN50@main
$LN51@main:

; 414  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T11[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 415  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T10[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 416  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 417  : 			<< " nanoseconds" << std::endl;
; 418  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 419  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 420  : 
; 421  : 		// factored p_8 SIMD intrinsics.
; 422  : 		cout << endl << "factored p_8 intrinsics" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BI@KNMALJAH@factored?5p_8?5intrinsics?$AA@
	mov	edi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 423  : 		t1 = Clock::now();

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t1$77[ebp], ecx
	mov	DWORD PTR _t1$77[ebp+4], edx

; 424  : 		for (int n = 0; n < iterations; n++) {

	mov	DWORD PTR _n$65[ebp], 0
	jmp	SHORT $LN55@main
$LN53@main:
	mov	eax, DWORD PTR _n$65[ebp]
	add	eax, 1
	mov	DWORD PTR _n$65[ebp], eax
$LN55@main:
	mov	eax, DWORD PTR _n$65[ebp]
	cmp	eax, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN54@main

; 425  : 			x = factoredP8SinSIMD(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?factoredP8SinSIMD@@YANN@Z		; factoredP8SinSIMD
	add	esp, 8
	fstp	QWORD PTR _x$[ebp]

; 426  : 		}

	jmp	SHORT $LN53@main
$LN54@main:

; 427  : 		t2 = Clock::now();

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t2$75[ebp], ecx
	mov	DWORD PTR _t2$75[ebp+4], edx

; 428  : 		std::cout << "time: "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0N@KBFONPHA@?5nanoseconds?$AA@
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	edi, esp
	push	edx
	push	eax
	push	OFFSET ??_C@_06IEGNHKAC@time?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 429  : 			<< std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
; 430  : 			<< " nanoseconds" << std::endl;
; 431  : 		cout << "ns/f(x): "

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	lea	eax, DWORD PTR _t1$77[ebp]
	push	eax
	lea	ecx, DWORD PTR _t2$75[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, eax
	call	__ltod3
	cvtsi2sd xmm1, DWORD PTR _iterations$[ebp]
	divsd	xmm0, xmm1
	mov	edi, esp
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09JBFKNNHK@ns?1f?$CIx?$CJ?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 432  : 			<< (double)std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count() / iterations << endl;
; 433  : 	}

	jmp	$LN20@main
$LN21@main:

; 434  : 
; 435  : 	return 0;

	xor	eax, eax

; 436  : 
; 437  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN64@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN64@main:
	DD	6
	DD	$LN63@main
$LN63@main:
	DD	-48					; ffffffd0H
	DD	24					; 00000018H
	DD	$LN57@main
	DD	-112					; ffffff90H
	DD	40					; 00000028H
	DD	$LN58@main
	DD	-192					; ffffff40H
	DD	56					; 00000038H
	DD	$LN59@main
	DD	-288					; fffffee0H
	DD	72					; 00000048H
	DD	$LN60@main
	DD	-432					; fffffe50H
	DD	8
	DD	$LN61@main
	DD	-464					; fffffe30H
	DD	8
	DD	$LN62@main
$LN62@main:
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN61@main:
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN60@main:
	DB	99					; 00000063H
	DB	56					; 00000038H
	DB	0
$LN59@main:
	DB	99					; 00000063H
	DB	54					; 00000036H
	DB	0
$LN58@main:
	DB	99					; 00000063H
	DB	52					; 00000034H
	DB	0
$LN57@main:
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?factoredP8SinSIMD@@YANN@Z
_TEXT	SEGMENT
$T1 = -944						; size = 16
$T2 = -912						; size = 16
$T3 = -880						; size = 16
$T4 = -848						; size = 16
$T5 = -816						; size = 16
$T6 = -784						; size = 16
$T7 = -752						; size = 16
$T8 = -720						; size = 16
_w$ = -304						; size = 16
_v$ = -272						; size = 16
_u$ = -240						; size = 16
_t$ = -208						; size = 16
_s$ = -176						; size = 16
_r8Magnitude$ = -144					; size = 8
_q2$ = -112						; size = 16
_q1$ = -80						; size = 16
_r4$ = -48						; size = 32
_x$ = 8							; size = 8
?factoredP8SinSIMD@@YANN@Z PROC				; factoredP8SinSIMD, COMDAT

; 183  : double factoredP8SinSIMD(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 952				; 000003b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-952]
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 184  : 
; 185  : 	__declspec(align(16)) double r4[] = { 5.895452530035389, 3.141592785174156, -2.753860092985270, -0.000000131571428 };

	movsd	xmm0, QWORD PTR __real@401794f1820e7d64
	movsd	QWORD PTR _r4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@400921fb65ed6164
	movsd	QWORD PTR _r4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@c00607e7cce90ccf
	movsd	QWORD PTR _r4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@be81a8c2850e8406
	movsd	QWORD PTR _r4$[ebp+24], xmm0

; 186  : 	__declspec(align(16)) double q1[] = { -13.1185097003180, 48.6766343231151 };

	movsd	xmm0, QWORD PTR __real@c02a3cad4dae3fc8
	movsd	QWORD PTR _q1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4048569bf41890b3
	movsd	QWORD PTR _q1$[ebp+8], xmm0

; 187  : 	__declspec(align(16)) double q2[] = { 6.83532455770833, 17.3332241883087 };

	movsd	xmm0, QWORD PTR __real@401b575f52239c9d
	movsd	QWORD PTR _q2$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4031554e2e2f05a3
	movsd	QWORD PTR _q2$[ebp+8], xmm0

; 188  : 	__declspec(align(16)) double r8Magnitude = 2.32374889636375e-005;

	movsd	xmm0, QWORD PTR __real@3ef85dc4150da9f3
	movsd	QWORD PTR _r8Magnitude$[ebp], xmm0

; 189  : 
; 190  : 	__m128d s, t, u, v, w;
; 191  : 
; 192  : 	u.m128d_f64[0] = r4[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 193  : 	u.m128d_f64[1] = r4[1];				//u = | r4[1] | r4[0] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+eax]
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 194  : 	v.m128d_f64[0] = r4[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 195  : 	v.m128d_f64[1] = r4[3];				//v = | r4[3] | r4[2] |

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 196  : 	w.m128d_f64[0] = x;

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 197  : 	w.m128d_f64[1] = x;					//w = | x | x |

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 198  : 
; 199  : 	u = _mm_sub_pd(w, u);				//u = | x - r4[1] | x - r4[0] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	subpd	xmm0, XMMWORD PTR _u$[ebp]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _u$[ebp], xmm0

; 200  : 	v = _mm_sub_pd(w, v);				//v = | x - r4[3] | x - r4[2] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	subpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _v$[ebp], xmm0

; 201  : 	u = _mm_mul_pd(u, v);				//u = | (x - r4[1])(x - r4[3]) | (x - r4[0])(x - r4[2]) |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _u$[ebp], xmm0

; 202  : 
; 203  : 	s.m128d_f64[0] = q1[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _q1$[ebp+ecx]
	movsd	QWORD PTR _s$[ebp+eax], xmm0

; 204  : 	s.m128d_f64[1] = q2[0];				//s = | q2[0] | q1[0] |

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _q2$[ebp+ecx]
	movsd	QWORD PTR _s$[ebp+edx], xmm0

; 205  : 	s = _mm_mul_pd(s, w);				//s = | x*q2[0] | x * q1[0] |

	movaps	xmm0, XMMWORD PTR _s$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _s$[ebp], xmm0

; 206  : 
; 207  : 	t.m128d_f64[0] = q1[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _q1$[ebp+eax]
	movsd	QWORD PTR _t$[ebp+edx], xmm0

; 208  : 	t.m128d_f64[1] = q2[1];				//t = | q2[1] | q1[1] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _q2$[ebp+eax]
	movsd	QWORD PTR _t$[ebp+ecx], xmm0

; 209  : 	w = _mm_mul_pd(w, w);				//w = | x^2 | x^2 |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 210  : 	s = _mm_add_pd(t, s);				//s = | x*q2[0] + q2[1] | x * q1[0] + q1[1] |

	movaps	xmm0, XMMWORD PTR _t$[ebp]
	addpd	xmm0, XMMWORD PTR _s$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _s$[ebp], xmm0

; 211  : 	w = _mm_add_pd(w, s);				//w = | x^2 + x*q2[0] + q2[1] | x^2 + x * q1[0] + q1[1] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	addpd	xmm0, XMMWORD PTR _s$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 212  : 	w = _mm_mul_pd(w, u);				//w = | (x - r4[1])(x - r4[3])(x^2 + x*q2[0] + q2[1]) | (x - r4[0])(x - r4[2])(x^2 + x * q1[0] + q1[1]) |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	mulpd	xmm0, XMMWORD PTR _u$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 213  : 	w.m128d_f64[0] *= w.m128d_f64[1];	//w[0] = w[1]*w[0]

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _w$[ebp+edx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 214  : 	w.m128d_f64[0] *= r8Magnitude;		//w[0] = r4Magnitude*w[0]

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _r8Magnitude$[ebp]
	mov	edx, 8
	imul	eax, edx, 0
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 215  : 
; 216  : 	return w.m128d_f64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	fld	QWORD PTR _w$[ebp+ecx]

; 217  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@factoredP8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN12@factoredP8:
	DD	8
	DD	$LN11@factoredP8
$LN11@factoredP8:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@factoredP8
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN4@factoredP8
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN5@factoredP8
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN6@factoredP8
	DD	-208					; ffffff30H
	DD	16					; 00000010H
	DD	$LN7@factoredP8
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN8@factoredP8
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN9@factoredP8
	DD	-304					; fffffed0H
	DD	16					; 00000010H
	DD	$LN10@factoredP8
$LN10@factoredP8:
	DB	119					; 00000077H
	DB	0
$LN9@factoredP8:
	DB	118					; 00000076H
	DB	0
$LN8@factoredP8:
	DB	117					; 00000075H
	DB	0
$LN7@factoredP8:
	DB	116					; 00000074H
	DB	0
$LN6@factoredP8:
	DB	115					; 00000073H
	DB	0
$LN5@factoredP8:
	DB	113					; 00000071H
	DB	50					; 00000032H
	DB	0
$LN4@factoredP8:
	DB	113					; 00000071H
	DB	49					; 00000031H
	DB	0
$LN3@factoredP8:
	DB	114					; 00000072H
	DB	52					; 00000034H
	DB	0
?factoredP8SinSIMD@@YANN@Z ENDP				; factoredP8SinSIMD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?factoredP8Sin@@YANN@Z
_TEXT	SEGMENT
tv157 = -352						; size = 8
_r8Magnitude$ = -144					; size = 8
_q2$ = -112						; size = 16
_q1$ = -80						; size = 16
_r4$ = -48						; size = 32
_x$ = 8							; size = 8
?factoredP8Sin@@YANN@Z PROC				; factoredP8Sin, COMDAT

; 173  : double factoredP8Sin(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 174  : 
; 175  : 	__declspec(align(16)) double r4[] = { 5.895452530035389, 3.141592785174156, -2.753860092985270, -0.000000131571428 };

	movsd	xmm0, QWORD PTR __real@401794f1820e7d64
	movsd	QWORD PTR _r4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@400921fb65ed6164
	movsd	QWORD PTR _r4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@c00607e7cce90ccf
	movsd	QWORD PTR _r4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@be81a8c2850e8406
	movsd	QWORD PTR _r4$[ebp+24], xmm0

; 176  : 	__declspec(align(16)) double q1[] = { -13.1185097003180, 48.6766343231151 };

	movsd	xmm0, QWORD PTR __real@c02a3cad4dae3fc8
	movsd	QWORD PTR _q1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4048569bf41890b3
	movsd	QWORD PTR _q1$[ebp+8], xmm0

; 177  : 	__declspec(align(16)) double q2[] = { 6.83532455770833, 17.3332241883087 };

	movsd	xmm0, QWORD PTR __real@401b575f52239c9d
	movsd	QWORD PTR _q2$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4031554e2e2f05a3
	movsd	QWORD PTR _q2$[ebp+8], xmm0

; 178  : 	__declspec(align(16)) double r8Magnitude = 2.32374889636375e-005;

	movsd	xmm0, QWORD PTR __real@3ef85dc4150da9f3
	movsd	QWORD PTR _r8Magnitude$[ebp], xmm0

; 179  : 
; 180  : 	return r8Magnitude*(x - r4[0])*(x - r4[1])*(x - r4[2])*(x - r4[3])*(x*x + q1[0] * x + q1[1])*(x*x + q2[0] * x + q2[1]);

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	subsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _r8Magnitude$[ebp]
	mov	edx, 8
	shl	edx, 0
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+edx]
	mulsd	xmm0, xmm1
	mov	eax, 8
	shl	eax, 1
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+eax]
	mulsd	xmm0, xmm1
	mov	ecx, 8
	imul	edx, ecx, 3
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+edx]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _x$[ebx]
	mulsd	xmm1, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm2, QWORD PTR _q1$[ebp+ecx]
	mulsd	xmm2, QWORD PTR _x$[ebx]
	addsd	xmm1, xmm2
	mov	edx, 8
	shl	edx, 0
	addsd	xmm1, QWORD PTR _q1$[ebp+edx]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _x$[ebx]
	mulsd	xmm1, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm2, QWORD PTR _q2$[ebp+ecx]
	mulsd	xmm2, QWORD PTR _x$[ebx]
	addsd	xmm1, xmm2
	mov	edx, 8
	shl	edx, 0
	addsd	xmm1, QWORD PTR _q2$[ebp+edx]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR tv157[ebp], xmm0
	fld	QWORD PTR tv157[ebp]

; 181  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@factoredP8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN7@factoredP8:
	DD	3
	DD	$LN6@factoredP8
$LN6@factoredP8:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@factoredP8
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN4@factoredP8
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN5@factoredP8
$LN5@factoredP8:
	DB	113					; 00000071H
	DB	50					; 00000032H
	DB	0
$LN4@factoredP8:
	DB	113					; 00000071H
	DB	49					; 00000031H
	DB	0
$LN3@factoredP8:
	DB	114					; 00000072H
	DB	52					; 00000034H
	DB	0
?factoredP8Sin@@YANN@Z ENDP				; factoredP8Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?factoredP4SinSIMD@@YANN@Z
_TEXT	SEGMENT
$T1 = -464						; size = 16
$T2 = -432						; size = 16
$T3 = -400						; size = 16
_w$ = -176						; size = 16
_v$ = -144						; size = 16
_u$ = -112						; size = 16
_r4Magnitude$ = -80					; size = 8
_r4$ = -48						; size = 32
_x$ = 8							; size = 8
?factoredP4SinSIMD@@YANN@Z PROC				; factoredP4SinSIMD, COMDAT

; 150  : double factoredP4SinSIMD(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 151  : 
; 152  : 	__declspec(align(16)) double r4[] = { 4.86760270318095678, 3.14292946639567994, -1.72601004959195414, -0.00133681280580084 };

	movsd	xmm0, QWORD PTR __real@4013786cd7d05568
	movsd	QWORD PTR _r4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@400924b8343e6ef4
	movsd	QWORD PTR _r4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@bffb9dbcb6b90958
	movsd	QWORD PTR _r4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@bf55e6ffd208d315
	movsd	QWORD PTR _r4$[ebp+24], xmm0

; 153  : 	__declspec(align(16)) double r4Magnitude = 0.03720932737240900;

	movsd	xmm0, QWORD PTR __real@3fa30d19d8575fff
	movsd	QWORD PTR _r4Magnitude$[ebp], xmm0

; 154  : 
; 155  : 	__m128d u, v, w;
; 156  : 
; 157  : 	u.m128d_f64[0] = r4[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 158  : 	u.m128d_f64[1] = r4[1];				//u = | r4[1] | r4[0] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+eax]
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 159  : 	v.m128d_f64[0] = r4[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 160  : 	v.m128d_f64[1] = r4[3];				//v = | r4[3] | r4[2] |

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 161  : 	w.m128d_f64[0] = x;

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 162  : 	w.m128d_f64[1] = x;					//w = | x | x |

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 163  : 
; 164  : 	u = _mm_sub_pd(w, u);				//u = | x - r4[1] | x - r4[0] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	subpd	xmm0, XMMWORD PTR _u$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _u$[ebp], xmm0

; 165  : 	v = _mm_sub_pd(w, v);				//v = | x - r4[3] | x - r4[2] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	subpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _v$[ebp], xmm0

; 166  : 	w = _mm_mul_pd(u, v);				//u = | (x - r4[1])(x - r4[3]) | (x - r4[0])(x - r4[2]) |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 167  : 	w.m128d_f64[0] *= w.m128d_f64[1];	//w[0] = (x - r4[1])(x - r4[3])(x - r4[0])(x - r4[2])

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _w$[ebp+edx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 168  : 	w.m128d_f64[0] *= r4Magnitude;		//w[0] = r4Magnitude*(x - r4[1])(x - r4[3])(x - r4[0])(x - r4[2])

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _r4Magnitude$[ebp]
	mov	edx, 8
	imul	eax, edx, 0
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 169  : 
; 170  : 	return w.m128d_f64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	fld	QWORD PTR _w$[ebp+ecx]

; 171  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@factoredP4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@factoredP4:
	DD	4
	DD	$LN7@factoredP4
$LN7@factoredP4:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@factoredP4
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN4@factoredP4
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN5@factoredP4
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN6@factoredP4
$LN6@factoredP4:
	DB	119					; 00000077H
	DB	0
$LN5@factoredP4:
	DB	118					; 00000076H
	DB	0
$LN4@factoredP4:
	DB	117					; 00000075H
	DB	0
$LN3@factoredP4:
	DB	114					; 00000072H
	DB	52					; 00000034H
	DB	0
?factoredP4SinSIMD@@YANN@Z ENDP				; factoredP4SinSIMD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?factoredP4Sin@@YANN@Z
_TEXT	SEGMENT
tv95 = -288						; size = 8
_r4Magnitude$ = -80					; size = 8
_r4$ = -48						; size = 32
_x$ = 8							; size = 8
?factoredP4Sin@@YANN@Z PROC				; factoredP4Sin, COMDAT

; 142  : double factoredP4Sin(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 143  : 
; 144  : 	__declspec(align(16)) double r4[] = { 4.86760270318095678, 3.14292946639567994, -1.72601004959195414, -0.00133681280580084 };

	movsd	xmm0, QWORD PTR __real@4013786cd7d05568
	movsd	QWORD PTR _r4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@400924b8343e6ef4
	movsd	QWORD PTR _r4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@bffb9dbcb6b90958
	movsd	QWORD PTR _r4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@bf55e6ffd208d315
	movsd	QWORD PTR _r4$[ebp+24], xmm0

; 145  : 	__declspec(align(16)) double r4Magnitude = 0.03720932737240900;

	movsd	xmm0, QWORD PTR __real@3fa30d19d8575fff
	movsd	QWORD PTR _r4Magnitude$[ebp], xmm0

; 146  : 
; 147  : 	return r4Magnitude*(x - r4[0])*(x - r4[1])*(x - r4[2])*(x - r4[3]);

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	subsd	xmm0, QWORD PTR _r4$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _r4Magnitude$[ebp]
	mov	edx, 8
	shl	edx, 0
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+edx]
	mulsd	xmm0, xmm1
	mov	eax, 8
	shl	eax, 1
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+eax]
	mulsd	xmm0, xmm1
	mov	ecx, 8
	imul	edx, ecx, 3
	movsd	xmm1, QWORD PTR _x$[ebx]
	subsd	xmm1, QWORD PTR _r4$[ebp+edx]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR tv95[ebp], xmm0
	fld	QWORD PTR tv95[ebp]

; 148  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@factoredP4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@factoredP4:
	DD	1
	DD	$LN4@factoredP4
$LN4@factoredP4:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@factoredP4
$LN3@factoredP4:
	DB	114					; 00000072H
	DB	52					; 00000034H
	DB	0
?factoredP4Sin@@YANN@Z ENDP				; factoredP4Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?unrolledHornerSinP8SIMD@@YANN@Z
_TEXT	SEGMENT
$T1 = -640						; size = 16
$T2 = -608						; size = 16
$T3 = -576						; size = 16
$T4 = -544						; size = 16
$T5 = -512						; size = 16
$T6 = -480						; size = 16
$T7 = -448						; size = 16
$T8 = -416						; size = 16
_w$ = -192						; size = 16
_v$ = -160						; size = 16
_u$ = -128						; size = 16
_c8$ = -96						; size = 72
_x$ = 8							; size = 8
?unrolledHornerSinP8SIMD@@YANN@Z PROC			; unrolledHornerSinP8SIMD, COMDAT

; 108  : double unrolledHornerSinP8SIMD(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 648				; 00000288H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-648]
	mov	ecx, 162				; 000000a2H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 109  : 
; 110  : 	__declspec(align(16)) double c8[] = { 2.32374889636375e-005, -2.92010889608420e-004, 2.19672210664518e-004, 8.01674986535062e-003, 2.79388739405372e-004, -1.66810967472702e-001, 3.94059931985509e-005, 9.99995401622597e-001, 1.31570823227546e-007 };

	movsd	xmm0, QWORD PTR __real@3ef85dc4150da9f3
	movsd	QWORD PTR _c8$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bf332321388fc9b8
	movsd	QWORD PTR _c8$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3f2ccaf9ebd98c0b
	movsd	QWORD PTR _c8$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3f806b15f3ef65c3
	movsd	QWORD PTR _c8$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f324f5d7fa558bc
	movsd	QWORD PTR _c8$[ebp+32], xmm0
	movsd	xmm0, QWORD PTR __real@bfc55a0fd0f46665
	movsd	QWORD PTR _c8$[ebp+40], xmm0
	movsd	xmm0, QWORD PTR __real@3f04a8fb9dce943e
	movsd	QWORD PTR _c8$[ebp+48], xmm0
	movsd	xmm0, QWORD PTR __real@3feffff65b43d273
	movsd	QWORD PTR _c8$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3e81a8bd333aee92
	movsd	QWORD PTR _c8$[ebp+64], xmm0

; 111  : 	__m128d u, v, w;
; 112  : 
; 113  : 	u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 114  : 	u.m128d_f64[1] = x*x;						//u = | x^2 | x^2 |

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	shl	eax, 0
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 115  : 	v.m128d_f64[0] = c8[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+eax], xmm0

; 116  : 	v.m128d_f64[1] = c8[1];						//v = | c[1] | c[0] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+ecx], xmm0

; 117  : 
; 118  : 	w = _mm_mul_pd(u, v);						//w = | (x^2)*c[1] | (x^2)*c[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 119  : 	v.m128d_f64[0] = c8[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 120  : 	v.m128d_f64[1] = c8[3];						//v = | c[3] | c[2] |

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 121  : 	w = _mm_add_pd(w, v);						//w = | c[3] + (x^2)*c[1] | c[2] + (x^2)*c[0] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	addpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 122  : 
; 123  : 	w = _mm_mul_pd(u, w);						//w = | (x^2)*(c[3] + (x^2)*c[1]) | (x^2)*(c[2] + (x^2)*c[0]) |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 124  : 	v.m128d_f64[0] = c8[4];

	mov	eax, 8
	shl	eax, 2
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 125  : 	v.m128d_f64[1] = c8[5];						//v = | c[5] | c[6] |

	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 126  : 	w = _mm_add_pd(w, v);						//w = | c[5] + (x^2)*(c[3] + (x^2)*c[1]) | c[6] + (x^2)*(c[2] + (x^2)*c[0]) |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	addpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 127  : 
; 128  : 	w = _mm_mul_pd(u, w);

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 129  : 	v.m128d_f64[0] = c8[6];

	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+eax], xmm0

; 130  : 	v.m128d_f64[1] = c8[7];

	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 131  : 	w = _mm_add_pd(w, v);						//...					

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	addpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 132  : 
; 133  : 	u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 134  : 	u.m128d_f64[1] = x;							//u = | x | x^2 |

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 135  : 	w = _mm_mul_pd(u, w);						//w = | x*w[1] | (x^2)*w[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 136  : 	w.m128d_f64[0] += c8[8];					//w = | w[1] | c[n] + w[0] |

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 3
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	addsd	xmm0, QWORD PTR _c8$[ebp+edx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 137  : 	w = _mm_hadd_pd(w, w);						//w = | w[0]+w[1] | w[0]+w[1] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	haddpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 138  : 
; 139  : 	return w.m128d_f64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	fld	QWORD PTR _w$[ebp+ecx]

; 140  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@unrolledHo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@unrolledHo:
	DD	4
	DD	$LN7@unrolledHo
$LN7@unrolledHo:
	DD	-96					; ffffffa0H
	DD	72					; 00000048H
	DD	$LN3@unrolledHo
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN4@unrolledHo
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN5@unrolledHo
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN6@unrolledHo
$LN6@unrolledHo:
	DB	119					; 00000077H
	DB	0
$LN5@unrolledHo:
	DB	118					; 00000076H
	DB	0
$LN4@unrolledHo:
	DB	117					; 00000075H
	DB	0
$LN3@unrolledHo:
	DB	99					; 00000063H
	DB	56					; 00000038H
	DB	0
?unrolledHornerSinP8SIMD@@YANN@Z ENDP			; unrolledHornerSinP8SIMD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?unrolledHornerSinP8@@YANN@Z
_TEXT	SEGMENT
_y$ = -128						; size = 8
_c8$ = -96						; size = 72
_x$ = 8							; size = 8
?unrolledHornerSinP8@@YANN@Z PROC			; unrolledHornerSinP8, COMDAT

; 90   : double unrolledHornerSinP8(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 91   : 
; 92   : 	__declspec(align(16)) double c8[] = { 2.32374889636375e-005, -2.92010889608420e-004, 2.19672210664518e-004, 8.01674986535062e-003, 2.79388739405372e-004, -1.66810967472702e-001, 3.94059931985509e-005, 9.99995401622597e-001, 1.31570823227546e-007 };

	movsd	xmm0, QWORD PTR __real@3ef85dc4150da9f3
	movsd	QWORD PTR _c8$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bf332321388fc9b8
	movsd	QWORD PTR _c8$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3f2ccaf9ebd98c0b
	movsd	QWORD PTR _c8$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3f806b15f3ef65c3
	movsd	QWORD PTR _c8$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f324f5d7fa558bc
	movsd	QWORD PTR _c8$[ebp+32], xmm0
	movsd	xmm0, QWORD PTR __real@bfc55a0fd0f46665
	movsd	QWORD PTR _c8$[ebp+40], xmm0
	movsd	xmm0, QWORD PTR __real@3f04a8fb9dce943e
	movsd	QWORD PTR _c8$[ebp+48], xmm0
	movsd	xmm0, QWORD PTR __real@3feffff65b43d273
	movsd	QWORD PTR _c8$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3e81a8bd333aee92
	movsd	QWORD PTR _c8$[ebp+64], xmm0

; 93   : 	__declspec(align(16)) double y;
; 94   : 
; 95   : 	y = c8[0];

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 96   : 	y = c8[1] + x*y;

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 97   : 	y = c8[2] + x*y;

	mov	eax, 8
	shl	eax, 1
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 98   : 	y = c8[3] + x*y;

	mov	eax, 8
	imul	ecx, eax, 3
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 99   : 	y = c8[4] + x*y;

	mov	eax, 8
	shl	eax, 2
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 100  : 	y = c8[5] + x*y;

	mov	eax, 8
	imul	ecx, eax, 5
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 101  : 	y = c8[6] + x*y;

	mov	eax, 8
	imul	ecx, eax, 6
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 102  : 	y = c8[7] + x*y;

	mov	eax, 8
	imul	ecx, eax, 7
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 103  : 	y = c8[8] + x*y;

	mov	eax, 8
	shl	eax, 3
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c8$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 104  : 
; 105  : 	return y;

	fld	QWORD PTR _y$[ebp]

; 106  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@unrolledHo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@unrolledHo:
	DD	1
	DD	$LN4@unrolledHo
$LN4@unrolledHo:
	DD	-96					; ffffffa0H
	DD	72					; 00000048H
	DD	$LN3@unrolledHo
$LN3@unrolledHo:
	DB	99					; 00000063H
	DB	56					; 00000038H
	DB	0
?unrolledHornerSinP8@@YANN@Z ENDP			; unrolledHornerSinP8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?unrolledHornerSinP4SIMD@@YANN@Z
_TEXT	SEGMENT
$T1 = -480						; size = 16
$T2 = -448						; size = 16
$T3 = -416						; size = 16
$T4 = -384						; size = 16
_w$ = -160						; size = 16
_v$ = -128						; size = 16
_u$ = -96						; size = 16
_c4$ = -64						; size = 40
_x$ = 8							; size = 8
?unrolledHornerSinP4SIMD@@YANN@Z PROC			; unrolledHornerSinP4SIMD, COMDAT

; 66   : double unrolledHornerSinP4SIMD(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-488]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 67   : 
; 68   : 	__declspec(align(16)) double c4[] = { 0.03720932737240900, -0.23379309903632944, 0.05446968167436379, 0.98260114780498042, 0.00131345589768425 };

	movsd	xmm0, QWORD PTR __real@3fa30d19d8575fff
	movsd	QWORD PTR _c4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bfcdeceea9321d76
	movsd	QWORD PTR _c4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3fabe3733ad470ca
	movsd	QWORD PTR _c4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3fef7177f65ab3d7
	movsd	QWORD PTR _c4$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f5585088804c979
	movsd	QWORD PTR _c4$[ebp+32], xmm0

; 69   : 
; 70   : 	__m128d u, v, w;
; 71   : 
; 72   : 	u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 73   : 	u.m128d_f64[1] = x*x;						//u = | x^2 | x^2 |

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	shl	eax, 0
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 74   : 	v.m128d_f64[0] = c4[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _c4$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+eax], xmm0

; 75   : 	v.m128d_f64[1] = c4[1];						//v = | c[1] | c[0] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _c4$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+ecx], xmm0

; 76   : 	w = _mm_mul_pd(u, v);						//w = | (x^2)*c[1] | (x^2)*c[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 77   : 	v.m128d_f64[0] = c4[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	xmm0, QWORD PTR _c4$[ebp+eax]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 78   : 	v.m128d_f64[1] = c4[3];						//v = | c[3] | c[2] |

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	shl	edx, 0
	movsd	xmm0, QWORD PTR _c4$[ebp+ecx]
	movsd	QWORD PTR _v$[ebp+edx], xmm0

; 79   : 	w = _mm_add_pd(w, v);						//w = | c[3] + (x^2)*c[1] | c[2] + (x^2)*c[0] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	addpd	xmm0, XMMWORD PTR _v$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 80   : 	u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 81   : 	u.m128d_f64[1] = x;							//u = | x | x^2 |

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 82   : 	w = _mm_mul_pd(u, w);						//w = | x*w[1] | (x^2)*w[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 83   : 	w.m128d_f64[0] += c4[4];					//w = | w[1] | c[n] + w[0] |

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 2
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	addsd	xmm0, QWORD PTR _c4$[ebp+edx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 84   : 	w = _mm_hadd_pd(w, w);						//w = | w[0]+w[1] | w[0]+w[1] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	haddpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 85   : 
; 86   : 	return w.m128d_f64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	fld	QWORD PTR _w$[ebp+ecx]

; 87   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@unrolledHo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@unrolledHo:
	DD	4
	DD	$LN7@unrolledHo
$LN7@unrolledHo:
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN3@unrolledHo
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN4@unrolledHo
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN5@unrolledHo
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN6@unrolledHo
$LN6@unrolledHo:
	DB	119					; 00000077H
	DB	0
$LN5@unrolledHo:
	DB	118					; 00000076H
	DB	0
$LN4@unrolledHo:
	DB	117					; 00000075H
	DB	0
$LN3@unrolledHo:
	DB	99					; 00000063H
	DB	52					; 00000034H
	DB	0
?unrolledHornerSinP4SIMD@@YANN@Z ENDP			; unrolledHornerSinP4SIMD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?unrolledHornerSinP4@@YANN@Z
_TEXT	SEGMENT
_y$ = -96						; size = 8
_c4$ = -64						; size = 40
_x$ = 8							; size = 8
?unrolledHornerSinP4@@YANN@Z PROC			; unrolledHornerSinP4, COMDAT

; 52   : double unrolledHornerSinP4(double x) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 53   : 
; 54   : 	__declspec(align(16)) double c4[] = { 0.03720932737240900, -0.23379309903632944, 0.05446968167436379, 0.98260114780498042, 0.00131345589768425 };

	movsd	xmm0, QWORD PTR __real@3fa30d19d8575fff
	movsd	QWORD PTR _c4$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bfcdeceea9321d76
	movsd	QWORD PTR _c4$[ebp+8], xmm0
	movsd	xmm0, QWORD PTR __real@3fabe3733ad470ca
	movsd	QWORD PTR _c4$[ebp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3fef7177f65ab3d7
	movsd	QWORD PTR _c4$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3f5585088804c979
	movsd	QWORD PTR _c4$[ebp+32], xmm0

; 55   : 	__declspec(align(16)) double y;
; 56   : 
; 57   : 	y = c4[0];

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _c4$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 58   : 	y = c4[1] + x*y;

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c4$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 59   : 	y = c4[2] + x*y;

	mov	eax, 8
	shl	eax, 1
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c4$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 60   : 	y = c4[3] + x*y;

	mov	eax, 8
	imul	ecx, eax, 3
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c4$[ebp+ecx]
	movsd	QWORD PTR _y$[ebp], xmm0

; 61   : 	y = c4[4] + x*y;

	mov	eax, 8
	shl	eax, 2
	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	addsd	xmm0, QWORD PTR _c4$[ebp+eax]
	movsd	QWORD PTR _y$[ebp], xmm0

; 62   : 
; 63   : 	return y;

	fld	QWORD PTR _y$[ebp]

; 64   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@unrolledHo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@unrolledHo:
	DD	1
	DD	$LN4@unrolledHo
$LN4@unrolledHo:
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN3@unrolledHo
$LN3@unrolledHo:
	DB	99					; 00000063H
	DB	52					; 00000034H
	DB	0
?unrolledHornerSinP4@@YANN@Z ENDP			; unrolledHornerSinP4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?hornersMethodSIMD@@YANNPANI@Z
_TEXT	SEGMENT
$T1 = -432						; size = 16
$T2 = -400						; size = 16
$T3 = -368						; size = 16
$T4 = -336						; size = 16
_i$5 = -108						; size = 4
_w$ = -96						; size = 16
_v$ = -64						; size = 16
_u$ = -32						; size = 16
_x$ = 8							; size = 8
_c$ = 16						; size = 4
_length$ = 20						; size = 4
?hornersMethodSIMD@@YANNPANI@Z PROC			; hornersMethodSIMD, COMDAT

; 21   : double hornersMethodSIMD(double x, double* c, unsigned int length) {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22   : 
; 23   : 	__m128d u, v, w;
; 24   : 
; 25   : 	u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 26   : 	u.m128d_f64[1] = x*x;						//u = | x^2 | x^2 |

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	shl	eax, 0
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 27   : 
; 28   : 	w.m128d_f64[0] = c[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _c$[ebx]
	movsd	xmm0, QWORD PTR [edx+ecx]
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 29   : 	w.m128d_f64[1] = c[1];						//w = | c[1] | c[0] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _c$[ebx]
	movsd	xmm0, QWORD PTR [edx+eax]
	movsd	QWORD PTR _w$[ebp+ecx], xmm0

; 30   : 
; 31   : 	for (int i = 2; i < (length - 1); i += 2) {

	mov	DWORD PTR _i$5[ebp], 2
	jmp	SHORT $LN4@hornersMet
$LN2@hornersMet:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 2
	mov	DWORD PTR _i$5[ebp], eax
$LN4@hornersMet:
	mov	eax, DWORD PTR _length$[ebx]
	sub	eax, 1
	cmp	DWORD PTR _i$5[ebp], eax
	jae	SHORT $LN3@hornersMet

; 32   : 		v.m128d_f64[0] = c[i];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _c$[ebx]
	movsd	xmm0, QWORD PTR [eax+edx*8]
	movsd	QWORD PTR _v$[ebp+ecx], xmm0

; 33   : 		v.m128d_f64[1] = c[i + 1];				//v = | c[i+1] | c[i] |

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR _c$[ebx]
	movsd	xmm0, QWORD PTR [edx+ecx*8+8]
	movsd	QWORD PTR _v$[ebp+eax], xmm0

; 34   : 		w = _mm_mul_pd(u, w);					//w = | (x^2)*w[1] | (x^2)*w[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 35   : 		w = _mm_add_pd(v, w);					//w = | c[i+1] + x*w[1] | c[i] + x*w[0] |

	movaps	xmm0, XMMWORD PTR _v$[ebp]
	addpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 36   : 	}

	jmp	SHORT $LN2@hornersMet
$LN3@hornersMet:

; 37   : 
; 38   : 	if ((length % 2) == 0) {

	mov	eax, DWORD PTR _length$[ebx]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	jne	SHORT $LN5@hornersMet

; 39   : 		w.m128d_f64[0] *= x;					//w = | w[1] | x*w[0] |

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	edx, 8
	imul	eax, edx, 0
	movsd	QWORD PTR _w$[ebp+eax], xmm0

; 40   : 	}
; 41   : 	else {

	jmp	SHORT $LN6@hornersMet
$LN5@hornersMet:

; 42   : 		u.m128d_f64[0] = x*x;

	movsd	xmm0, QWORD PTR _x$[ebx]
	mulsd	xmm0, QWORD PTR _x$[ebx]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _u$[ebp+ecx], xmm0

; 43   : 		u.m128d_f64[1] = x;						//u = | x | x^2 |

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR _x$[ebx]
	movsd	QWORD PTR _u$[ebp+eax], xmm0

; 44   : 		w = _mm_mul_pd(u, w);					//w = | x*w[1] | (x^2)*w[0] |

	movaps	xmm0, XMMWORD PTR _u$[ebp]
	mulpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 45   : 		w.m128d_f64[0] += c[length - 1];		//w = | w[1] | c[n] + w[0] |

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _length$[ebx]
	mov	eax, DWORD PTR _c$[ebx]
	movsd	xmm0, QWORD PTR _w$[ebp+ecx]
	addsd	xmm0, QWORD PTR [eax+edx*8-8]
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	QWORD PTR _w$[ebp+edx], xmm0
$LN6@hornersMet:

; 46   : 	}
; 47   : 	w = _mm_hadd_pd(w, w);						//w = | w[0]+w[1] | w[0]+w[1] |

	movaps	xmm0, XMMWORD PTR _w$[ebp]
	haddpd	xmm0, XMMWORD PTR _w$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _w$[ebp], xmm0

; 48   : 
; 49   : 	return w.m128d_f64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	fld	QWORD PTR _w$[ebp+ecx]

; 50   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@hornersMet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN12@hornersMet:
	DD	3
	DD	$LN11@hornersMet
$LN11@hornersMet:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@hornersMet
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN9@hornersMet
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN10@hornersMet
$LN10@hornersMet:
	DB	119					; 00000077H
	DB	0
$LN9@hornersMet:
	DB	118					; 00000076H
	DB	0
$LN8@hornersMet:
	DB	117					; 00000075H
	DB	0
?hornersMethodSIMD@@YANNPANI@Z ENDP			; hornersMethodSIMD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?hornersMethod@@YANNPANH@Z
_TEXT	SEGMENT
_i$1 = -24						; size = 4
_y$ = -12						; size = 8
_x$ = 8							; size = 8
_c$ = 16						; size = 4
_length$ = 20						; size = 4
?hornersMethod@@YANNPANH@Z PROC				; hornersMethod, COMDAT

; 11   : double hornersMethod(double x, double* c, int length) {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12   : 
; 13   : 	double y = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _y$[ebp], xmm0

; 14   : 	for (int i = 0; i < length; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@hornersMet
$LN2@hornersMet:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@hornersMet:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN3@hornersMet

; 15   : 		y = c[i] + x*y;

	movsd	xmm0, QWORD PTR _x$[ebp]
	mulsd	xmm0, QWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	addsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR _y$[ebp], xmm0

; 16   : 	}

	jmp	SHORT $LN2@hornersMet
$LN3@hornersMet:

; 17   : 
; 18   : 	return y;

	fld	QWORD PTR _y$[ebp]

; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hornersMethod@@YANNPANH@Z ENDP				; hornersMethod
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>, COMDAT
; _this$ = ecx

; 117  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 			: _MyRep(static_cast<_Rep>(_Val))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 118  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch, COMDAT
; _this$ = ecx

; 257  : 		{	// get duration from epoch

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 258  : 		return (_MyDur);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT
; _this$ = ecx

; 244  : 		{	// construct from a duration

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		: _MyDur(_Other)

	mov	eax, DWORD PTR __Other$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 245  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count, COMDAT
; _this$ = ecx

; 134  : 		{	// get stored rep

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 		return (_MyRep);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 136  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
;	COMDAT ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
_TEXT	SEGMENT
$T2 = -296						; size = 8
$T3 = -280						; size = 8
__Part$ = -72						; size = 8
__Whole$ = -56						; size = 8
__Ctr$ = -40						; size = 8
__Freq$ = -24						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ PROC ; std::chrono::steady_clock::now, COMDAT

; 998  : 		{	// get current time

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 999  : 		const long long _Freq = _Query_perf_frequency();	// doesn't change after system boot

	mov	esi, esp
	call	DWORD PTR __imp___Query_perf_frequency
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Freq$[ebp], eax
	mov	DWORD PTR __Freq$[ebp+4], edx

; 1000 : 		const long long _Ctr = _Query_perf_counter();

	mov	esi, esp
	call	DWORD PTR __imp___Query_perf_counter
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Ctr$[ebp], eax
	mov	DWORD PTR __Ctr$[ebp+4], edx

; 1001 : 		static_assert(period::num == 1, "This assumes period::num == 1.");
; 1002 : 		const long long _Whole = (_Ctr / _Freq) * period::den;

	mov	eax, DWORD PTR __Freq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ctr$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Ctr$[ebp]
	push	eax
	call	__alldiv
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR __Whole$[ebp], eax
	mov	DWORD PTR __Whole$[ebp+4], edx

; 1003 : 		const long long _Part = (_Ctr % _Freq) * period::den / _Freq;

	mov	eax, DWORD PTR __Freq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ctr$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Ctr$[ebp]
	push	eax
	call	__allrem
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR __Freq$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR __Freq$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__alldiv
	mov	DWORD PTR __Part$[ebp], eax
	mov	DWORD PTR __Part$[ebp+4], edx

; 1004 : 		return (time_point(duration(_Whole + _Part)));

	mov	eax, DWORD PTR __Whole$[ebp]
	add	eax, DWORD PTR __Part$[ebp]
	mov	ecx, DWORD PTR __Whole$[ebp+4]
	adc	ecx, DWORD PTR __Part$[ebp+4]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1005 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ENDP ; std::chrono::steady_clock::now
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 535  :             return _time64(_Time);

	mov	esi, esp
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 536  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 606  : 		return (EOF);

	or	eax, -1

; 607  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 595  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]

; 596  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 523  : 		return (*_First == 0 ? 0

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\cs\cpp\sinapprox\sinapprox\sinapprox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
